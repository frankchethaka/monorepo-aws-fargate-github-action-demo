# This workflow will create docker image per module and push to GitHub Repo. Once done,
# it will perform deploy to AWS Fargate.
# Flow will perform following.
# Trigger: Push on a branch
# Workflow: Build monorepo dependencies and push to GitHub Repo
#   job 1: Build images
#     1. Checkout the Code
#     2. Update maven settings file with GitHub token
#     3. Build Docker image which will download the dependencies
#     4. Push images to GitHub

on:
  push:
    branches:
      - main
      
name: Build monorepo modules and deploy to AWS Fargate

jobs:
  build_images:
    runs-on: ubuntu-latest
    outputs:
      built_image_list: ${{ steps.docker_build.outputs.image }}
    strategy:
      matrix:
        include:
          - module: core-module
            MODULE_DIR: ./core-module
            IMAGE_NAME: core_module
          - module: web-module
            MODULE_DIR: ./web-module
            IMAGE_NAME: web_module
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Load ENV Variables
        uses: falti/dotenv-action@v0.2.5
        id: repo_env
      - name: Update maven settings xml - Username
        uses: Mudlet/xmlstarlet-action@v1.1
        with:
          args: ed -N p=http://maven.apache.org/SETTINGS/1.0.0  -u "/p:settings/p:servers/p:server/p:username" -v ${{ github.actor }} ./maven_settings.xml
      - name: Update maven settings xml - Password
        uses: Mudlet/xmlstarlet-action@v1.1
        with:
          args: ed -N p=http://maven.apache.org/SETTINGS/1.0.0  -u "/p:settings/p:servers/p:server/p:password" -v ${{ secrets.GITHUB_TOKEN }} ./maven_settings.xml
      - name: Compile all modules and push to Docker Repo.
        id: build_code
        env:
          BUILD_IMAGE: "monorepo_build"
          REPO: docker.pkg.github.com/frankchethaka/monorepo-aws-fargate-github-action-demo
        run: |
          sudo docker login https://docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          sudo docker build -t $REPO/$BUILD_IMAGE:${{ steps.repo_env.outputs.app_version }} -f Dockerfile-build .
          echo "::set-output name=image::$REPO/$BUILD_IMAGE:${{ steps.repo_env.outputs.cms_version }}"
        shell: bash

      - name: Run docker build and push to GitHub Repo
        id: docker_build
        env:
          BUILD_IMAGE: "monorepo_build"
          REPO: docker.pkg.github.com/frankchethaka/monorepo-aws-fargate-github-action-demo
        run: |
          echo "::debug::Set Building docker image for module - ${{ matrix.module }}"
          cd ${{ matrix.MODULE_DIR }}
          echo "${{ steps.repo_env.outputs }}" > env.json
          sudo docker login https://docker.pkg.github.com -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          sudo docker build -t $REPO/${{ matrix.IMAGE_NAME }}:${{ steps.repo_env.outputs.app_version }} \
            --build-arg BUILDER_IMAGE=$REPO/$BUILD_IMAGE:${{ steps.repo_env.outputs.app_version }} -f Dockerfile .
          sudo docker tag $REPO/${{ matrix.IMAGE_NAME }}:${{ steps.repo_env.outputs.app_version }} $REPO/${{ matrix.IMAGE_NAME }}:latest
          sudo docker push $REPO/${{ matrix.IMAGE_NAME }}:${{ steps.repo_env.outputs.app_version }}
          sudo docker push $REPO/${{ matrix.IMAGE_NAME }}:latest
          echo "::set-output name=image::$REPO/${{ matrix.IMAGE_NAME }}:${{ steps.repo_env.outputs.cms_version }}"
        shell: bash
      - name: Write ENV json file
        run: |
          echo "${{ steps.repo_env.outputs }}" > env.json
          cat env.json
        shell: bash
      - name: Create task-json file with jinja2
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: ${{ matrix.MODULE_DIR }}/task-def.json.j2
          output_file: ${{ matrix.MODULE_DIR }}/task-def.json
          data_file: env.json
          data_format: json
      - name: View task-def.json
        run: cat ${{ matrix.MODULE_DIR }}/task-def.json


